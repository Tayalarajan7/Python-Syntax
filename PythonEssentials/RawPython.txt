Print statement in Python:
Example: print("Hello, World!")

Indentation:
Python uses indentation to indicate a block of code.

Example:
if 5 > 2:
  print("Five is greater than two!")

Variables:
Example:
x = 5
y = "Hello, World!"

Comments:
Example: #This is a comment.

Multiple line comments:
Example:
"""
This is a comment
written in
more than just one line
"""
print("Hello, World!")

Casting:
If you want to specify the data type of a variable, this can be done with casting.

Example:
x = str(3)    # x will be '3'
y = int(3)    # y will be 3
z = float(3)  # z will be 3.0

Get the Type:
You can get the data type of a variable with the type() function.

Example:
x = 5
y = "John"
print(type(x))
print(type(y))
Output:
<class 'int'>
<class 'str'>

Single or Double Quotes?
String variables can be declared either by using single or double quotes:

Example:
x = "John"
# is the same as
x = 'John'

Case-Sensitive
Variable names are case-sensitive.

Example
This will create two variables:

a = 4
A = "Sally"
#A will not overwrite a

Rules for variable declaration:
A variable name must start with a letter or the underscore character
A variable name cannot start with a number
A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
Variable names are case-sensitive (age, Age and AGE are three different variables)

Camel Case
Each word, except the first, starts with a capital letter:
myVariableName = "John"

Pascal Case
Each word starts with a capital letter:
MyVariableName = "John"

Snake Case
Each word is separated by an underscore character:
my_variable_name = "John"

Many Values to Multiple Variables:
Python allows you to assign values to multiple variables in one line

Example:
x, y, z = "Orange", "Banana", "Cherry"
print(x)
print(y)
print(z)

One value to Multiple Variables:
x1 = y1 = z1 = "Orange"
print(x,y,z)

Unpack a collection:
fruits = ["apple", "banana", "cherry"]
x2, y2, z2 = fruits
print(x2,y2,z2)

Python - Output Variables
The Python print statement is often used to output variables.
To combine both text and a variable, Python uses the + character:
x3 = "awesome"
print("Python is "+ x3)

You can also use the + character to add a variable to another variable:
x4 = "Python is "
y4 = "awesome"
z4 = x4+y4
print(z4)

For numbers, the + character works as a mathematical operator:
x = 5
y = 10
print(x+y)

If you try to combine a string and a number, Python will give you an error:
Example
x = 5
y = "John"
print(x + y)

The global Keyword
Normally, when you create a variable inside a function, that variable is local, and can only be used inside that function.
To create a global variable inside a function, you can use the global keyword.

Example
If you use the global keyword, the variable belongs to the global scope:

def myfunc():
  global x
  x = "fantastic"

myfunc()
print("Python is " + x)

To change the value of a global variable inside a function, refer to the variable by using the global keyword:
x = "awesome"

def myfunc():
  global x
  x = "fantastic"

myfunc()

print("Python is " + x)








 
	
