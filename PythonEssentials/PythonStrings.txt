Multiline Strings:
You can assign a multiline string to a variable by using three quotes:
a = """Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua."""
print(a)

(or)

a = '''Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua.'''
print(a)

Strings are Arrays:
However, Python does not have a character data type, a single character is
simply a string with a length of 1.

a = "Hello, World!"
print(a[1])

Output:
e

Looping Through a String:
for x in "banana":
  print(x)

Output:
b
a
n
a
n
a

String Length:
To get the length of a string, use the len() function.

a = "Hello, World!"
print(len(a))

Output:
13

Check String:
To check if a certain phrase or character is present in a string, we can use the keyword in.

txt = "The best things in life are free!"
print("free" in txt)

Output:
True

Example2:
txt = "The best things in life are free!"
if "free" in txt:
  print("Yes, 'free' is present.")

Output:
Yes, 'free' is present.

Check if NOT:
To check if a certain phrase or character is NOT present in a string, we can use the keyword not in.

txt = "The best things in life are free!"
print("expensive" not in txt)

Output:
True

Use it in an if statement:
print only if "expensive" is NOT present:

txt = "The best things in life are free!"
if "expensive" not in txt:
  print("No, 'expensive' is NOT present.")

Output:
"No, 'expensive' is NOT present."

Slicing:
You can return a range of characters by using the slice syntax.

Specify the start index and the end index, separated by a colon, to return a part
of the string.

Example:
Get the characters from position 2 to position 5 (not included):

b = "Hello, World!"
print(b[2:5])

Output:
llo

Note: The first character has index 0.

Slice From the Start:
Get the characters from the start to position 5 (not included)

b = "Hello, World!"
print(b[:5])

Output:
Hello

Slice To the End:
By leaving out the end index, the range will go to the end
Get the characters from position 2, and all the way to the end

b = "Hello, World!"
print(b[2:])

Output:
llo, World!"

Negative Indexing:
Use negative indexes to start the slice from the end of the string
Get the characters
From: "o" in "World!" (position -5)
To, but not included: "d" in "World!" (position -2):

b = "Hello, World!"
print(b[-5:-2])

Output:
orl

Upper Case:
The upper() method returns the string in upper case 
a = "Hello, World!"
print(a.upper())

Output:
HELLO, WORLD!

Lower Case:
The lower() method returns the string in lower case
a = "Hello, World!"
print(a.lower())

Output:
hello, world!

Remove Whitespace:
Whitespace is the space before and/or after the actual text, and very often you
want to remove this space.

The strip() method removes any whitespace from the beginning or the end:

a = " Hello, World! "
print(a.strip()) # returns "Hello, World!"

Output:
Hello, World!

Replace String:
The replace() method replaces a string with another string:

a = "Hello, World!"
print(a.replace("H", "J"))

Output:
Jello, World!

Split String:
The split() method returns a list where the text between the specified separator becomes the list items.

a = "Hello, World!"
print(a.split(",")) # returns ['Hello', ' World!']

Output:
['Hello', ' World!']

String Concatenation:
To concatenate, or combine, two strings you can use the + operator.

a = "Hello"
b = "World"
c = a + b
print(c)

Output:
HelloWorld

String Format
As we learned in the Python Variables chapter, we cannot combine strings and numbers like this:

Example
age = 36
txt = "My name is John, I am " + age
print(txt)

Output:
Traceback (most recent call last):
  File "demo_string_format_error.py", line 2, in <module>
    txt = "My name is John, I am " + age
TypeError: must be str, not int

But we can combine strings and numbers by using the format() method!

The format() method takes the passed arguments, formats them, and places them in the string where the placeholders {} are:

age = 36
txt = "My name is John, and I am {}"
print(txt.format(age))

Output:
My name is John, and I am 36

The format() method takes unlimited number of arguments, and are placed into the respective placeholders:

quantity = 3
itemno = 567
price = 49.95
myorder = "I want {} pieces of item {} for {} dollars."
print(myorder.format(quantity, itemno, price))

Output:
I want 3 pieces of item 567 for 49.95 dollars.

You can use index numbers {0} to be sure the arguments are placed in the correct placeholders:

quantity = 3
itemno = 567
price = 49.95
myorder = "I want to pay {2} dollars for {0} pieces of item {1}."
print(myorder.format(quantity, itemno, price))

Output:
I want to pay 49.95 dollars for 3 pieces of item 567

Escape Characters
Other escape characters used in Python:

Code	Result	Try it
\'	Single Quote	
\\	Backslash	
\n	New Line	
\r	Carriage Return	
\t	Tab	
\b	Backspace	
\f	Form Feed	
\ooo	Octal value	
\xhh	Hex value

String Methods
Python has a set of built-in methods that you can use on strings.

Note: All string methods returns new values. They do not change the original string.

Method	Description
capitalize()	Converts the first character to upper case
casefold()	Converts string into lower case
center()	Returns a centered string
count()		Returns the number of times a specified value occurs in a string
encode()	Returns an encoded version of the string
endswith()	Returns true if the string ends with the specified value
expandtabs()	Sets the tab size of the string
find()		Searches the string for a specified value and returns the position of where it was found
format()	Formats specified values in a string
format_map()	Formats specified values in a string
index()		Searches the string for a specified value and returns the position of where it was found
isalnum()	Returns True if all characters in the string are alphanumeric
isalpha()	Returns True if all characters in the string are in the alphabet
isdecimal()	Returns True if all characters in the string are decimals
isdigit()	Returns True if all characters in the string are digits
isidentifier()	Returns True if the string is an identifier
islower()	Returns True if all characters in the string are lower case
isnumeric()	Returns True if all characters in the string are numeric
isprintable()	Returns True if all characters in the string are printable
isspace()	Returns True if all characters in the string are whitespaces
istitle()	Returns True if the string follows the rules of a title
isupper()	Returns True if all characters in the string are upper case
join()		Joins the elements of an iterable to the end of the string
ljust()		Returns a left justified version of the string
lower()		Converts a string into lower case
lstrip()	Returns a left trim version of the string
maketrans()	Returns a translation table to be used in translations
partition()	Returns a tuple where the string is parted into three parts
replace()	Returns a string where a specified value is replaced with a specified value
rfind()		Searches the string for a specified value and returns the last position of where it was found
rindex()	Searches the string for a specified value and returns the last position of where it was found
rjust()		Returns a right justified version of the string
rpartition()	Returns a tuple where the string is parted into three parts
rsplit()	Splits the string at the specified separator, and returns a list
rstrip()	Returns a right trim version of the string
split()		Splits the string at the specified separator, and returns a list
splitlines()	Splits the string at line breaks and returns a list
startswith()	Returns true if the string starts with the specified value
strip()		Returns a trimmed version of the string
swapcase()	Swaps cases, lower case becomes upper case and vice versa
title()		Converts the first character of each word to upper case
translate()	Returns a translated string
upper()		Converts a string into upper case
zfill()		Fills the string with a specified number of 0 values at the beginning























