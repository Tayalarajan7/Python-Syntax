Set:
	A Set is a collection which is both unordered and unindexed.

	Sets are written with curly brackets	

	Set is one of 4 built-in data types in Python used to store collections 
of data, the other 3 are List, Tuple, and Dictionary, all with different 
qualities and usage.

Note: Sets are unordered, so you cannot be sure in which order the items will
appear. 

Sets are
* Unordered
	Items in a set do not have a defined order.

* Unchangeable
	Cannot change the items after the set has been created.

* Do not allow duplicate values
	Sets cannot have two items with the same value.

Access Items:
You cannot access items in a set by referring to an index or a key.

But you can loop through the set items using a for loop, or ask if a specified
value is present in a set, by using the in keyword.

Add Set Items:
	Once a set is created, you cannot change its items, but you can add
new items.

Remove Item:
	To remove an item in a set, use the remove(), or the discard() method.

Set Methods
Python has a set of built-in methods that you can use on sets.

Method	Description
add()				Adds an element to the set
clear()				Removes all the elements from the set
copy()				Returns a copy of the set
difference()			Returns a set containing the difference between two or more sets
difference_update()		Removes the items in this set that are also included in another, specified set
discard()			Remove the specified item
intersection()			Returns a set, that is the intersection of two other sets
intersection_update()		Removes the items in this set that are not present in other, specified set(s)
isdisjoint()			Returns whether two sets have a intersection or not
issubset()			Returns whether another set contains this set or not
issuperset()			Returns whether this set contains another set or not
pop()				Removes an element from the set
remove()			Removes the specified element
symmetric_difference()		Returns a set with the symmetric differences of two sets
symmetric_difference_update()	inserts the symmetric differences from this set and another
union()				Return a set containing the union of sets
update()			Update the set with the union of this set and others












	
